{"version":3,"sources":["components/CategoryAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAoBO,OACtCN,EAAc,MAIlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAjBS,SAACP,GAClBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAMD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACvB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,sDCAPO,EAAc,SAAC,GAAqB,IAApBb,EAAmB,EAAnBA,IAAKU,EAAc,EAAdA,MAAc,EAARD,GAEpC,OACI,sBAAKK,UAAU,6CAAf,UACI,4BAAIJ,IACJ,qBAAKK,IAAMf,EAAKgB,IAAMN,QCFrBO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAErB,ECJwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GAEFH,EAAS,CACLf,KAAKkB,EACLL,SAAS,SAGlB,CAACpB,IAEDqB,EDbgBK,CAAa1B,GAA7BO,EAAP,EAAOA,KAAKa,EAAZ,EAAYA,QAEZ,OACI,qCACI,oBAAIJ,UAAU,wCAAd,SAAuDhB,IAEtDoB,GAAW,mBAAGJ,UAAU,mCAAb,yBAEZ,qBAAKA,UAAU,YAAf,SAEQT,EAAKE,KAAI,SAAAC,GAAG,OACR,cAAC,EAAD,eAEIA,GADGA,EAAIC,aEftBgB,EAAe,WAGxB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAGA,OACI,qCACI,wDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OAClB,cAAC,EAAD,CAEGA,SAAYA,GADLA,YCfnC6B,IAASC,OAAO,cAAC,EAAD,IAAiBC,SAASC,eAAe,W","file":"static/js/main.ab83f7ae.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const CategoryAdd = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [ inputValue,...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type='text'\r\n                value={inputValue}\r\n                onChange={handleChange}\r\n                />\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nCategoryAdd.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\nexport const getGifs = async(category)=>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=CkdA7UCbPyOtx7b2jc5p3W0KfMsNjn9L`\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs =data.map(img =>{\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({url, title,id}) => {\r\n   \r\n    return (\r\n        <div className=\"card animate__animated animate__backInDown\">\r\n            <p>{title}</p>\r\n            <img src ={url} alt ={title}/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport {GifGridItem} from './GifGridItem'\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data,loading} = useFetchGifs(category);\r\n   \r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__backInDown\">{category}</h3>\r\n\r\n            {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    data.map(img=>(\r\n                        <GifGridItem\r\n                        key = {img.id}\r\n                        {...img}/>\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n ","import { useEffect, useState } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n            .then(imgs=>{\r\n                \r\n                setState({\r\n                    data:imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n         },[category]);\r\n\r\n    return state;\r\n}","import React, { useState } from 'react';\r\nimport { CategoryAdd } from './components/CategoryAdd';\r\nimport {GifGrid} from '../src/components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n\r\n    const [categories, setCategories] = useState(['Samurai x']);\r\n    // const handleAdd =()=> {setCategories([...categories,'Evangelion'])};\r\n\r\n    return (\r\n        <>\r\n            <h2>Gif App -By DDRRAKKEN-</h2>\r\n            <CategoryAdd setCategories={setCategories} />\r\n            <hr></hr>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => \r\n                        (<GifGrid \r\n                            key = {category}\r\n                            category = {category}/>)\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp';\n\nReactDOM.render(<GifExpertApp />,document.getElementById('root'));"],"sourceRoot":""}